---
- name: install epel-release
  yum:
    name: epel-release
  environment: "{{ proxy_env }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: open ports for openvpn
  firewalld:
    port: "{{ ovpn_port }}/{{ proto }}"
    permanent: yes
    state: enabled
    immediate: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: install packages
  package:
    name: 
      - openvpn
      - git
  environment: "{{ proxy_env }}"

- name: create server directory if it does not exist
  file:
    path: /etc/openvpn/{{ servername }}
    state: directory

- name: create easy-rsa directory if it does not exist
  file:
    path: '{{ easy_rsa_dir }}'
    state: directory

- name: get EasyRSA
  git:
    repo: https://github.com/OpenVPN/easy-rsa.git
    accept_hostkey: True
    remote: github
    dest: '/etc/openvpn/easy-rsa'
  environment: "{{ proxy_env }}"

- name: copy EasyRSA files
  copy:
    remote_src: yes
    src: /etc/openvpn/easy-rsa/easyrsa3/
    dest: '{{ easy_rsa_dir }}'
   
- name: template a file to vars
  template:
    src: vars.j2
    dest: '{{ easy_rsa_dir }}/vars'

- name: force intialize PKI
  shell:  sh easyrsa init-pki
  args:
    chdir: "{{ easy_rsa_dir }}"
    stdin: 'yes'
  tags: 
    - never
    - new_pki

- name: intialize new PKI
  shell: sh easyrsa init-pki
  args:
    chdir: "{{ easy_rsa_dir }}"
    creates: "{{ easy_rsa_dir }}/pki"
    stdin: 'yes'
    
- name: build CA
  shell: sh easyrsa build-ca nopass
  args:
      chdir: "{{ easy_rsa_dir }}"
      creates: "{{ easy_rsa_dir }}/pki/private/ca.key"
      stdin: '\n'
#- meta: end_play
- name: gen-req for server
  shell: echo "" | sh easyrsa gen-req {{ servername }} nopass
  args:
      chdir: "{{ easy_rsa_dir }}"
      creates: "{{ easy_rsa_dir }}/pki/private/{{ servername }}.key"

- name: sign-req for server
  shell: echo "yes" | sh easyrsa sign-req server {{ servername }}
  args:
      chdir: "{{ easy_rsa_dir }}"
      creates: "{{ easy_rsa_dir }}/pki/issued/{{ servername }}.crt"
    
- name: gen-dh
  shell: sh easyrsa gen-dh
  args:
      chdir: "{{ easy_rsa_dir }}"
      creates: "{{ easy_rsa_dir }}/pki/dh.pem"

- name: gen ta.key
  shell: openvpn --genkey --secret ta.key
  args:
      chdir: "{{ easy_rsa_dir }}"
      creates: "{{ easy_rsa_dir }}/ta.key"

- name: create keys directory if it does not exist
  file:
    path: /etc/openvpn/{{ servername }}/keys
    state: directory

- name: copy file with owner and permissions
  copy:
    remote_src: yes
    src: '{{ item }}'
    dest: '/etc/openvpn/{{ servername }}/keys/'
    mode: 0600
  with_items:
    - '{{ easy_rsa_dir }}/pki/ca.crt'
    - '{{ easy_rsa_dir }}/pki/private/{{ servername }}.key'
    - '{{ easy_rsa_dir }}/pki/issued/{{ servername }}.crt'
    - '{{ easy_rsa_dir }}/pki/dh.pem'
    - '{{ easy_rsa_dir }}/ta.key'
  notify:
    - restart openvpn

- name: template for server config
  template:
    src: server.conf.j2
    dest: '/etc/openvpn/{{ servername }}.conf'
  notify:
    - restart openvpn
  
- name: template for script add_ovpn_client.sh
  template:
    src: add_ovpn_client.sh.j2
    dest: '/etc/openvpn/{{ servername }}/add_ovpn_client.sh'
    mode: 750

- name: create clent configs directory if it does not exist
  file:
    path: /etc/openvpn/{{ servername }}/client_configs
    state: directory


- name: Redirect port 443 to 8443 with Rich Rule
  ansible.posix.firewalld:
    rich_rule: rule family=ipv4 -o eth0 -i tun0 -j ACCEPT
    #firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i eno1 -o eno2 -p tcp --dport 22 -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
    zone: public
    permanent: yes
    immediate: yes
    state: enabled
  tags: never

- name: enable ipv4_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Add firewall rules for transit trafic
  command: "{{ item }}"
  loop:
    - "firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i eth0 -o tun0  -j ACCEPT"
    - "firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i tun0 -o eth0  -j ACCEPT"
  register: firewall_result
  changed_when: "firewall_result.stderr.find('ALREADY_ENABLED') < 0"
  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Reload firewall
  command: "firewall-cmd --reload"
  become: yes
  when: firewall_result.changed and (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')